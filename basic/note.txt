零、computed watch methods 的使用场景
computed:
- 当依赖某些状态(state)产生新值的时候回优先选择使用computed

watch:
- 用来解决beforeUpdate,update两个钩子修改状态导致死循环的问题，采用watch
- 监测可能异步改变值的时候

methods:
- 定义事件响应函数
- 定义组件公共处理函数

一、 computed 和 methods 区别
1、相同点
如果作为模板的数据显示二者都能实现响应的功能，唯一不同的是 methods定义的方法需要执行  添加 ()
2、不同点
- computed 会基于响应数据缓存， methods 不会缓存
- diff 之前先看data里的数据是否发生变化，如果没有变化computed的方法不会执行，但methods里的方法会执行

二、watch 和 computed 
1、相同点
如果做信息展示，二者可以实现同样的功能。不同的是watch可能需要监听更多的属性，在这个时候，优先选择computed

2、不同点
- 当 想再更新data数据后再次更新数据时，不能使用updata生命周期钩子，建议使用watch来监听data数据里的变化
- 使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的

三、 如何使用模板重新渲染
1、只要改变data里的数据就会可能触发模板渲染
2、如果经过diff算法比较后，发现更新钱的虚拟DOM和更新后的虚拟DOM相同，就不会渲染模板

四、古老的MVC架构
backbone + jquery + underscore

Rxjs

2019-06-27
blog
  - blog-list
    - blog-list-item
      - blog-list-button
  - blog-form
    - blog-button

key
ul
  - li
  - li
  - li

组件内部： state
data: {
  x: 1
}
this.x

组件尾部： props
props: ['propsname']
this.propsname

组件间是单向数据流
- 组件外部不能访问组件内部的数据
- 组件内部不能修改组件外部的数据

父子组件间信息传递：
- 父传子： props
- 子传父： @defineEvent="handleEvent", this.$emit('defineEvent',args)
- :propsName.sync (@update:propsName)
- v-slot(替代v2.6- slot-scop)

异步组件，路由懒加载

2019-07-01
包容性路由
排他性路由

oops:

2019-07-04
状态: 
1、组件内部状态: data里的变量
2、组件外部状态:
- props
- states
3、所有的状态都在内存里
